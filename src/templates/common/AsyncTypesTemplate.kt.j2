// Async return type handlers

import kotlin.coroutines.Continuation

// FFI type for callback handlers
{%- for callback_param in ci.iter_future_callback_params() %}
@Suppress("NO_ACTUAL_FOR_EXPECT")
expect class UniFfiFutureCallback{{ callback_param.canonical_name() }}
{%- endfor %}

// Callback handlers for an async call.  These are invoked by Rust when the future is ready.
// They lift the return value or error and resume the suspended function.
{%- for result_type in ci.iter_async_result_types() %}
{%- let callback_param = result_type.future_callback_param() %}
expect fun create{{ result_type|future_callback_handler }}Data(continuation: {{ result_type|future_continuation_type }})
                      : {{ result_type|future_callback_handler }}Data

data class {{ result_type|future_callback_handler }}Data(
    val resultHandler: UniFfiFutureCallback{{ callback_param.canonical_name() }},
    val dropHandle: DropHandle<
        {%- match result_type.return_type %}
        {%- when Some(return_type) %}
            {{ return_type|type_name }}
        {%- when None %}
            Unit
        {%- endmatch %}
    >,
    val continuationRef: Pointer
)

{%- endfor %}

expect class DropHandle<T> {
    fun dropIt()
}
